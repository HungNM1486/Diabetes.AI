import streamlit as st
import numpy as np
import joblib
import tensorflow as tf
from streamlit_extras.colored_header import colored_header

# Load c√°c m√¥ h√¨nh
@st.cache_resource
def load_models():
    return {
        "kNN": joblib.load("models/knn_model_k19.pkl"),
        "SVM (Linear)": joblib.load("models/svm_linear_C60.pkl"),
        "SVM (RBF)": joblib.load("models/svm_rbf_C55_G1.pkl"),
        "Logistic Regression": joblib.load("models/logistic_reg_C1.pkl"),
        "Deep Learning": tf.keras.models.load_model("models/deep_learning_model.h5")
    }

models = load_models()

# ========== C·∫•u h√¨nh giao di·ªán ==========
st.set_page_config(
    page_title="Diabetes.AI - Ch·∫©n ƒëo√°n th√¥ng minh",
    # page_icon="ü©∫",
    layout="wide"
)

# ========== Ph·∫ßn Header ==========
colored_header(
    label="ü©∫ DIABETES.AI - H·ªÜ TH·ªêNG CH·∫®N ƒêO√ÅN TI·ªÇU ƒê∆Ø·ªúNG",
    color_name="red-70",
    description="·ª®ng d·ª•ng AI h·ªó tr·ª£ ch·∫©n ƒëo√°n b·ªánh ti·ªÉu ƒë∆∞·ªùng d·ª±a tr√™n c√°c ch·ªâ s·ªë l√¢m s√†ng"
)

# ========== Ph·∫ßn nh·∫≠p li·ªáu ==========
with st.sidebar:
    st.header("‚öôÔ∏è TH√îNG TIN B·ªÜNH NH√ÇN")
    with st.form("input_form"):
        # T·∫°o 2 c·ªôt v·ªõi t·ªâ l·ªá 1:1
        col1, col2 = st.columns(2, gap="medium")
        
        with col1:
            pregnancies = st.number_input("S·ªë l·∫ßn mang thai", 0, 20, 1, 
                                       help="S·ªë l·∫ßn mang thai (n·∫øu l√† n·ªØ)")
            glucose = st.number_input("Glucose (mg/dL)", 0, 200, 100,
                                   help="N·ªìng ƒë·ªô glucose huy·∫øt t∆∞∆°ng sau 2 gi·ªù")
            blood_pressure = st.number_input("Huy·∫øt √°p (mmHg)", 0, 200, 80,
                                           help="Huy·∫øt √°p t√¢m tr∆∞∆°ng (mm Hg)")
            skin_thickness = st.number_input("ƒê·ªô d√†y da (mm)", 0, 100, 20,
                                          help="ƒê·ªô d√†y n·∫øp g·∫•p da c∆° tam ƒë·∫ßu (mm)")
            
        with col2:
            insulin = st.number_input("Insulin (ŒºU/mL)", 0, 500, 30,
                                    help="N·ªìng ƒë·ªô insulin huy·∫øt thanh 2 gi·ªù (ŒºU/mL)")
            bmi = st.number_input("BMI", 0.0, 50.0, 25.0, step=0.1,
                                help="Ch·ªâ s·ªë kh·ªëi c∆° th·ªÉ (kg/m¬≤)")
            diabetes_pedigree = st.number_input("Diabetes Pedigree", 0.0, 2.5, 0.5, step=0.01,
                                               help="Ch·ª©c nƒÉng ph·∫£ h·ªá ti·ªÉu ƒë∆∞·ªùng")
            age = st.number_input("Tu·ªïi", 0, 120, 30)
        
        # Ph·∫ßn ch·ªçn model v√† n√∫t submit
        model_choice = st.selectbox("M√¥ h√¨nh AI", list(models.keys()),
                                  help="L·ª±a ch·ªçn thu·∫≠t to√°n AI cho ch·∫©n ƒëo√°n")
        
        submitted = st.form_submit_button("ü©∫ CH·∫®N ƒêO√ÅN NGAY", use_container_width=True)

# Update CSS
st.markdown(f"""
    <style>
    /* ƒêi·ªÅu ch·ªânh chi·ªÅu r·ªông c·ªôt */
    [data-testid="column"] {{
        width: calc(50% - 1rem) !important;
        flex: 1 1 calc(50% - 1rem) !important;
        min-width: 300px;
    }}
    
    /* Responsive design cho mobile */
    @media (max-width: 768px) {{
        [data-testid="column"] {{
            width: 100% !important;
            flex: 1 1 100% !important;
        }}
    }}
    
    /* ƒêi·ªÅu ch·ªânh kho·∫£ng c√°ch gi·ªØa c√°c input */
    .stNumberInput, .stSelectbox {{
        margin-bottom: 1.2rem;
    }}
    
    /* Fix chi·ªÅu r·ªông input */
    .stNumberInput > div, .stSelectbox > div {{
        width: 100% !important;
    }}
    </style>
""", unsafe_allow_html=True)

# ========== Ph·∫ßn k·∫øt qu·∫£ ==========
if submitted:
    with st.spinner("üîÑ H·ªá th·ªëng ƒëang ph√¢n t√≠ch d·ªØ li·ªáu..."):
        input_data = np.array([[pregnancies, glucose, blood_pressure, skin_thickness, 
                              insulin, bmi, diabetes_pedigree, age]])
        
        if model_choice == "Deep Learning":
            prediction = (models[model_choice].predict(input_data) > 0.5).astype(int)
        else:
            prediction = models[model_choice].predict(input_data)
        
        result = prediction[0]
        result_text = "D∆Ø∆†NG T√çNH - C√ì NGUY C∆† TI·ªÇU ƒê∆Ø·ªúNG" if result == 1 else "√ÇM T√çNH - KH√îNG C√ì NGUY C∆†"
        result_color = "positive" if result == 1 else "negative"
        
    st.markdown(f"""
        <div class="result-box {result_color}">
            <h3 style='margin:0'>K·∫æT QU·∫¢ CH·∫®N ƒêO√ÅN:</h3>
            <h1 style='margin:0; color:{"#e63946" if result ==1 else "#28a745"}'>‚ñ∂ {result_text}</h1>
            <p style='margin:0.5rem 0; font-size:0.9rem'>M√¥ h√¨nh s·ª≠ d·ª•ng: <strong>{model_choice}</strong></p>
        </div>
    """, unsafe_allow_html=True)

# ========== Ph·∫ßn gi·ªõi thi·ªáu m√¥ h√¨nh ==========
st.markdown("---")
st.header("üìä B·ªò THU·∫¨T TO√ÅN AI", anchor="models")

model_info = {
    "kNN": {
        "color": "#4CC9F0",
        "icon": "üßÆ",
        "desc": "Thu·∫≠t to√°n h·ªçc m√°y truy·ªÅn th·ªëng d·ª±a tr√™n kho·∫£ng c√°ch d·ªØ li·ªáu",
        "params": "K = 19 neighbors\nMetric: Minkowski",
        "accuracy": "78.2%"
    },
    "SVM (Linear)": {
        "color": "#7209B7",
        "icon": "‚ö°",
        "desc": "Ph√¢n l·ªõp b·∫±ng si√™u ph·∫≥ng tuy·∫øn t√≠nh",
        "params": "C = 60\nKernel: Linear",
        "accuracy": "81.5%"
    },
    "SVM (RBF)": {
        "color": "#F72585",
        "icon": "üåÄ",
        "desc": "Ph√¢n l·ªõp phi tuy·∫øn v·ªõi kernel Gaussian",
        "params": "C = 55\nGamma = 1",
        "accuracy": "83.1%"
    },
    "Logistic Regression": {
        "color": "#3A0CA3",
        "icon": "üìà",
        "desc": "M√¥ h√¨nh th·ªëng k√™ cho ph√¢n lo·∫°i nh·ªã ph√¢n",
        "params": "C = 1\nSolver: lbfgs",
        "accuracy": "79.8%"
    },
    "Deep Learning": {
        "color": "#FF006E",
        "icon": "üß†",
        "desc": "M·∫°ng neural t√≠ch ch·∫≠p ƒëa l·ªõp",
        "params": "4 Hidden layers\nDropout: 0.2",
        "accuracy": "85.6%"
    }
}

# T·∫°o layout d·∫°ng l∆∞·ªõi responsive
cols = st.columns(3, gap="medium")

for idx, (name, info) in enumerate(model_info.items()):
    with cols[idx % 3]:  # T·∫°o layout 3 c·ªôt
        with st.container():
            st.markdown(f"""
                <div class="model-card" style="border-left: 4px solid {info['color']}">
                    <div style="display: flex; align-items: center; gap: 10px; margin-bottom: 15px;">
                        <span style="font-size: 24px">{info['icon']}</span>
                        <h4 style="margin:0; color:{info['color']}">{name}</h4>
                    </div>
                    <p style="font-size: 0.95rem">{info['desc']}</p>
                    <div style="background: {info['color']}10; padding: 12px; border-radius: 8px; margin: 10px 0">
                        <p style="margin:0; font-size:0.9rem; color:{info['color']}">‚öôÔ∏è Tham s·ªë</p>
                        <pre style="margin:5px 0; font-size:0.85rem">{info['params']}</pre>
                        <p style="margin:0; font-size:0.9rem; color:{info['color']}">üìä ƒê·ªô ch√≠nh x√°c</p>
                        <p style="margin:5px 0; font-size:1.1rem; font-weight:500">{info['accuracy']}</p>
                    </div>
                </div>
            """, unsafe_allow_html=True)

# CSS b·ªï sung
st.markdown("""
    <style>
    .model-card {
        padding: 1.5rem;
        border-radius: 10px;
        background: white;
        margin: 1rem 0;
        box-shadow: 0 3px 10px rgba(0,0,0,0.1);
        transition: all 0.3s ease;
    }
    .model-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 5px 15px rgba(0,0,0,0.2);
    }
    pre {
        white-space: pre-wrap;
        font-family: inherit;
    }
    @media (max-width: 768px) {
        [data-testid="column"] {
            width: 100% !important;
        }
    }
    </style>
""", unsafe_allow_html=True)

# ========== Footer ==========
st.markdown("""
    <div style='text-align: center; margin-top: 4rem; color: #6c757d'>
        <hr style='margin-bottom: 1rem'>
        <p>ü©∫ H·ªá th·ªëng ch·∫©n ƒëo√°n AI - Phi√™n b·∫£n 2.0</p>
        <p>¬© 2025 Diabetes.AI | ƒê∆∞·ª£c ph√°t tri·ªÉn b·ªüi HungNM19PT</p>
    </div>
""", unsafe_allow_html=True)
